plotLBodeFitness(cnolist = res2$CNOList, model = res2$`Integrated-Model`$model, ode_parameters = res2$Parameters, transfer_function = 4)
rm(list = ls())
library(CARNIVAL) # load CARNIVAL library
#Load files
file.copy(from=system.file(“SBV_EGF_tvalues.csv”,package=“CARNIVAL”),to=getwd(),overwrite=TRUE)
file.copy(from=system.file(“dorothea_TF_mapping.csv”,package=“CARNIVAL”),to=getwd(),overwrite=TRUE)
load(file = system.file(“BEST_viperRegulon.rdata”,package=“CARNIVAL”))
df<-read.csv2(“SBV_EGF_tvalues.csv”, row.names = ‘GeneName’)
map<-read.csv(“dorothea_TF_mapping.csv”)
#Run DoRothEA and convert from gene symbol to uniprot ID
TF_genesymbol<-runDoRothEA(df, regulon=viper_regulon, confidence_level=c(‘A’,‘B’,‘C’))
library(CARNIVAL) # load CARNIVAL library
#Load files
file.copy(from=system.file("SBV_EGF_tvalues.csv",package="CARNIVAL"),to=getwd(),overwrite=TRUE)
file.copy(from=system.file("BEST_viperRegulon.rdata",package="CARNIVAL"),to=getwd(),overwrite=TRUE)
load(file = system.file("BEST_viperRegulon.rdata",package="CARNIVAL"))
df<-read.csv2("SBV_EGF_tvalues.csv", row.names = 'GeneName')
map<-read.csv("dorothea_TF_mapping.csv")
#Run DoRothEA and convert from gene symbol to uniprot ID
TF_genesymbol<-runDoRothEA(df, regulon=viper_regulon, confidence_level=c('A','B','C'))
library(CARNIVAL) # load CARNIVAL library
#Load files
file.copy(from=system.file("SBV_EGF_tvalues.csv",package="CARNIVAL"),to=getwd(),overwrite=TRUE)
file.copy(from=system.file("BEST_viperRegulon.rdata",package="CARNIVAL"),to=getwd(),overwrite=TRUE)
load(file = system.file("BEST_viperRegulon.rdata",package="CARNIVAL"))
df<-read.csv2("SBV_EGF_tvalues.csv", row.names = 'GeneName')
map<-read.csv("dorothea_TF_mapping.csv")
#Run DoRothEA and convert from gene symbol to uniprot ID
TF_genesymbol<-runDoRothEA(df, regulon=viper_regulon, confidence_level=c('A','B','C'))
TF_genesymbol
sessionInfo()
rm(list)
rm(list = ls())
library(CellNOptR)
data("ToyModel", package="CellNOptR")
data("CNOlistToy", package="CellNOptR")
pknmodel = ToyModel
cnolist = CNOlist(CNOlistToy)
model = preprocessing(cnolist, pknmodel)
resILP = ilpBinaryT1(cnolist = cnolist, model = model, numSolutions = 5)
library(readr)
resILP = ilpBinaryT1(cnolist = cnolist, model = model, numSolutions = 5)
library(stringr)
resILP = ilpBinaryT1(cnolist = cnolist, model = model, numSolutions = 5)
resILP
resILP = ilpBinaryT1(cnolist = cnolist, model = model, numSolutions = 3)
resILP$bitstringILP
cutAndPlot(CNOlist = cnolist, model = model, bStrings = resILP$bitstringILP[[1]])
cutAndPlot(CNOlist = cnolist, model = model, bStrings = list(resILP$bitstringILP[[1]]))
res = gaBinaryT1(cnolist, model, verbose=FALSE)
plotModel(model = model, CNOlist = cnolist)
cutAndPlot(cnolist, model, list(res$bString))
cutAndPlot(CNOlist = cnolist, model = model, bStrings = list(resILP$bitstringILP[[1]]))
cutAndPlot(CNOlist = cnolist, model = model, bStrings = list(resILP$bitstringILP[[2]]))
cutAndPlot(CNOlist = cnolist, model = model, bStrings = list(resILP$bitstringILP[[3]]))
dev.off()
vignette("CellNOptR")
vignette()
vignette("01-Working_with_large_arrays")
vignette("CellNOptR")
vignette("CellNOptR")
vignette(CellNOptR)
library(Biobase)
openVignette(package = "CellNOptR")
installed.packages(knitr)
install.packages('knitr', dependencies = TRUE)
library(knitr)
knit2pdf(input = "~/Documents/vignettes/CNORfeeder-vignette.Rnw", output = "~/Documents/vignettes/CNORfeeder-vignette.pdf")
rm(list = ls())
setwd("~/Documents/GitHub/CellNOpt-Feeder/vignettes/")
library(devtools)
install_github('saezlab/CellNOpt-Feeder')
dev.off()
remove.packages("CNORfeeder")
library(devtools)
install_github('saezlab/CellNOpt-Feeder', build_vignettes = TRUE)
library(devtools)
install_github('saezlab/CellNOpt-Feeder', build_vignettes = TRUE)
library(devtools)
install_github('saezlab/CellNOpt-Feeder', build_vignettes = TRUE)
library(devtools)
install_github('saezlab/CellNOpt-Feeder', build_vignettes = TRUE)
library(devtools)
install_github('saezlab/CellNOpt-Feeder', build_vignettes = TRUE)
vignette("CNORfeeder-vignette")
vignette("CNORfeeder-vignette")
remove.packages(CNORfeeder)
remove.packages("CNORfeeder")
library(devtools)
install_github('saezlab/CellNOpt-Feeder', build_vignettes = TRUE)
library(CNORfeeder)
vignette("CNORfeeder-vignette")
remove.packages("CNORfeeder")
library(devtools)
install_github('saezlab/CellNOpt-Feeder', build_vignettes = TRUE)
library(CNORfeeder)
vignette("CNORfeeder-vignette")
vignette("CNORfeeder-vignette")
remove.packages("CNORfeeder")
library(devtools)
install_github('saezlab/CellNOpt-Feeder', build_vignettes = TRUE)
remove.packages("CNORfeeder")
vignette("CNORfeeder-vignette")
install_github('saezlab/CellNOpt-Feeder', build_vignettes = TRUE)
library(CNORfeeder)
remove.packages("CNORfeeder")
library(devtools)
install_github('saezlab/CellNOpt-Feeder', build_vignettes = TRUE)
library(CNORfeeder)
vignette("CNORfeeder-vignette")
getwd()
remove.packages(CellNOptR)
library(devtools)
devtools::install_github("saezlab/CellNOptR", ref="ilp", build_vignettes = TRUE)
remove.packages("CellNOptR")
library(devtools)
devtools::install_github("saezlab/CellNOptR", ref="ilp", build_vignettes = TRUE)
library(CellNOptR)
vignette("CellNOptR-vignette")
remove.packages("CNORode")
library(devtools)
install_github("saezlab/CNORode",ref="crossval", build_vignettes = TRUE)
library(CNORode)
remove.packages("CNORfeeder")
library(devtools)
install_github('saezlab/CellNOpt-Feeder', build_vignettes = TRUE)
library(CNORfeeder)
vignette("CNORfeeder-vignette")
vignette("CellNOptR-vignette")
vignette("CNORode-vignette")
library("CARNIVAL")
?runCARNIVAL
?runPROGENy
library(OmnipathR)
interactions <-
import_Omnipath_Interactions(filter_databases=c())
interactions = interactions[which(sum(interactions$is_stimulation+interactions$is_inhibition)==1), ]
interactions <-
import_Omnipath_Interactions(filter_databases=c())
interactions = interactions[which((interactions$is_stimulation+interactions$is_inhibition)==1), ]
library("CNORode")
vignette("CNORode-vignette")
library(CNORode)
model=readSIF(system.file("extdata", "ToyModelMMB_FeedbackAnd.sif",
package="CNORode"));
cno_data=readMIDAS(system.file("extdata", "ToyModelMMB_FeedbackAnd.csv",
package="CNORode"));
cnolist=makeCNOlist(cno_data,subfield=FALSE);
plotModel(model = model, CNOlist = cnolist)
plotCNOlist(CNOlist = cnolist)
library(MEIGOR)
f_hepato<-getLBodeContObjFunction(cnolist, model, initial_pars, indices=NULL,
time = 1, verbose = 0, transfer_function = 2, reltol = 1e-05, atol = 1e-03,
maxStepSize = Inf, maxNumSteps = 1e4, maxErrTestsFails = 50, nan_fac = 1)
n_pars=length(initial_pars$LB);
problem<-list(f=f_hepato, x_L=initial_pars$LB[initial_pars$index_opt_pars],
x_U=initial_pars$UB[initial_pars$index_opt_pars]);
#Source a function containing the options used in the CeSSR publication
source(system.file("benchmarks","get_paper_settings.R",package="MEIGOR"))
#Set max time as 20 seconds per iteration
opts<-get_paper_settings(20);
Results<-CeSSR(problem,opts,Inf,Inf,3,TRUE,global_save_list=c('cnolist','model',
'initial_pars'))
library(MEIGOR)
source(system.file("benchmarks","get_paper_settings.R",package="MEIGOR"))
library(CellNOptR)
library(CNORode)
library(MEIGOR)
# MacNamara et al. 2012 case study:
data(PKN_ToyPB, package="CellNOptR")
data(CNOlist_ToyPB, package="CellNOptR")
# original and preprocessed network
plotModel(pknmodel, cnodata)
model = preprocessing(data = cnodata, model = pknmodel,
compression = T, expansion = T)
plotModel(model, cnodata)
plotCNOlist(CNOlist = cnodata)
# set initial parameters
ode_parameters=createLBodeContPars(model, LB_n = 1, LB_k = 0,
LB_tau = 0, UB_n = 4, UB_k = 1,
UB_tau = 1, default_n = 3, default_k = 0.5,
default_tau = 0.01, opt_n = FALSE, opt_k = TRUE,
opt_tau = TRUE, random = TRUE)
## Parameter Optimization
# essm
paramsSSm=defaultParametersSSm()
paramsSSm$local_solver = "DHC"
paramsSSm$maxtime = 600;
paramsSSm$maxeval = Inf;
paramsSSm$atol=1e-6;
paramsSSm$reltol=1e-6;
paramsSSm$nan_fac=0;
paramsSSm$dim_refset=30;
paramsSSm$n_diverse=1000;
paramsSSm$maxStepSize=Inf;
paramsSSm$maxNumSteps=10000;
transferFun=4;
paramsSSm$transfer_function = transferFun;
paramsSSm$lambda_tau=0
paramsSSm$lambda_k=0
paramsSSm$bootstrap=F
paramsSSm$SSpenalty_fac=0
paramsSSm$SScontrolPenalty_fac=0
# run the optimisation algorithm
opt_pars=parEstimationLBode(cnodata,model, method="essm",
ode_parameters=ode_parameters, paramsSSm=paramsSSm)
library(doParallel)
R=crossvalidateODE(CNOlist = cnodata, model = model,
type="datapoint", nfolds=3, parallel = TRUE,
ode_parameters = ode_parameters, paramsSSm = paramsSSm)
rm(list = ls())
remove.packages("CNORode")
library(devtools)
install_github("saezlab/CNORode",ref="crossval", build_vignettes = TRUE)
library(CNORode)
?crossvalidateODE
library(CNORfeeder)
vignette("CNORfeeder-vignette")
data(CNOlistDREAM,package="CellNOptR")
data(DreamModel,package="CellNOptR")
BTable <- makeBTables(CNOlist=CNOlistDREAM, k=2, measErr=c(0.1, 0))
Lrank <- linksRanking(CNOlist=CNOlistDREAM, measErr=c(0.1, 0), savefile=FALSE)
model<-preprocessing(data=CNOlistDREAM, model=DreamModel)
modelIntegr <- mapBTables2model(BTable=BTable,model=model,allInter=TRUE)
plotModel(model=modelIntegr, CNOlist=CNOlistDREAM, indexIntegr=modelIntegr$indexIntegr)
modelIntegrWeight <- weighting(modelIntegr=modelIntegr, PKNmodel=DreamModel,
CNOlist=CNOlistDREAM, integrFac=10)
data(PPINigraph,package="CNORfeeder")
data(UniprotIDdream,package="CNORfeeder")
modelIntegrWeight <- weighting(modelIntegr=modelIntegr, PKNmodel=DreamModel,
CNOlist=CNOlistDREAM, integrFac=10,
UniprotID=UniprotIDdream, PPI=PPINigraph)
initBstring<-rep(1,length(modelIntegrWeight$reacID))
DreamT1opt<-gaBinaryT1W(CNOlist=CNOlistDREAM, model=modelIntegrWeight,
initBstring=initBstring, maxGens=2, popSize=5, verbose=FALSE)
plotModel(model=modelIntegrWeight, CNOlist=CNOlistDREAM, bString=DreamT1opt$bString)
dev.off()
library(CellNOptR)
vignette("CellNOptR-vignette")
library(CellNOptR)
?ilpBinaryT1
setwd("~/Desktop/CARNIVAL-SimplifiedCode_AddOn/weights/")
vignette("CARNIVAL-vignette")
remove.packages("CARNIVAL")
library(devtools)
install_github('saezlab/CARNIVAL-Bioconductor-Dev', build_vignettes = TRUE)
dir_name = paste0(getwd(), "/apap_cbc")
dir_name
solverPath = "~/Documents/cbc"
vignette("CARNIVAL-vignette")
library(CARNIVAL) # load CARNIVAL library
library(dplyr) # load dplyr library
library(readr) # load readr library
library(igraph) # load igraph library
library(readxl) # load readxl library
load(file = system.file("Ex3_measurement_APAP_TGG_24hrHighDose.RData",
package="CARNIVAL"))
load(file = system.file("Ex3_network_APAP_TGG_Omnipath.RData",
package="CARNIVAL"))
result_cbc = runCARNIVAL(solverPath=solverPath,
netObj = Ex3_network_APAP_TGG_Omnipath,measObj = Ex3_measurement_APAP_TGG_24hrHighDose,
timelimit = 3600,
nodeID = "uniprot",
UP2GS = TRUE,
DOTfig = TRUE,
solver = "cbc", dir_name = dir_name)
remove.packages("CARNIVAL")
rm(list = ls())
library(devtools)
install_github('saezlab/CARNIVAL-Bioconductor-Dev', build_vignettes = TRUE)
vignette("CARNIVAL-vignette")
vignette("CARNIVAL-vignette")
library(CARNIVAL) # load CARNIVAL library
library(dplyr) # load dplyr library
library(readr) # load readr library
library(igraph) # load igraph library
library(readxl) # load readxl library
##
# Example 1
load(file = system.file("Ex2_inputs_SBV_EGF.RData",
package="CARNIVAL"))
load(file = system.file("Ex2_measurements_SBV_EGF.RData",
package="CARNIVAL"))
load(file = system.file("Ex2_network_SBV_Omnipath.RData",
package="CARNIVAL"))
load(file = system.file("progenyMembers.RData",package="CARNIVAL"))
weightObj <- assignPROGENyScores(progeny = t(pathway_scores),
progenyMembers = progenyMembers,
id = "uniprot")
library(CARNIVAL) # load CARNIVAL library
library(dplyr) # load dplyr library
library(readr) # load readr library
library(igraph) # load igraph library
library(readxl) # load readxl library
##
# Example 1
load(file = system.file("Ex2_inputs_SBV_EGF.RData",
package="CARNIVAL"))
load(file = system.file("Ex2_measurements_SBV_EGF.RData",
package="CARNIVAL"))
load(file = system.file("Ex2_network_SBV_Omnipath.RData",
package="CARNIVAL"))
load(file = system.file("progenyMembers.RData",package="CARNIVAL"))
weightObj <- assignPROGENyScores(progeny = t(pathway_scores),
progenyMembers = progenyMembers,
id = "uniprot")
rm(list = ls())
library(CARNIVAL) # load CARNIVAL library
library(dplyr) # load dplyr library
library(readr) # load readr library
library(igraph) # load igraph library
library(readxl) # load readxl library
file.copy(from=system.file("SBV_EGF_tvalues.csv",package="CARNIVAL"),
to=getwd(),overwrite=TRUE)
file.copy(from=system.file("dorothea_TF_mapping.csv",package="CARNIVAL"),
to=getwd(),overwrite=TRUE)
load(file = system.file("BEST_viperRegulon.rdata",package="CARNIVAL"))
df<-read.csv2("SBV_EGF_tvalues.csv", row.names = 'GeneName')
map<-read.csv("dorothea_TF_mapping.csv")
#Run DoRothEA and convert from gene symbol to uniprot ID
TF_genesymbol<-runDoRothEA(df, regulon=viper_regulon,
confidence_level=c('A','B','C'))
TF_uniprot<-GeneSymbol2Uniprot(TF_genesymbol, map, 1, 2)
#Generate measurement files in CARNIVAL input format
generate_measfile(measurements=TF_uniprot, topnumber=50,
write2folder="measurements")
## Loading weight matrix of PROGENy
file.copy(from=system.file("model_NatComm+14_human.csv",package="CARNIVAL"),
to=getwd(),overwrite=TRUE)
weight_matrix<-read.csv("model_NatComm+14_human.csv")
df_genenames<-data.frame('gene'=rownames(df),df)
## Run PROGENy
pathway_scores<-runPROGENy(df_genenames,weight_matrix, z_scores = F)
rm(list = ls())
library(devtools)
install_github('saezlab/CARNIVAL-Bioconductor-Dev', build_vignettes = TRUE)
vignette("CARNIVAL-vignette")
library(CARNIVAL) # load CARNIVAL library
library(dplyr) # load dplyr library
library(readr) # load readr library
library(igraph) # load igraph library
library(readxl) # load readxl library
file.copy(from=system.file("SBV_EGF_tvalues.csv",package="CARNIVAL"),
to=getwd(),overwrite=TRUE)
file.copy(from=system.file("dorothea_TF_mapping.csv",package="CARNIVAL"),
to=getwd(),overwrite=TRUE)
load(file = system.file("BEST_viperRegulon.rdata",package="CARNIVAL"))
df<-read.csv2("SBV_EGF_tvalues.csv", row.names = 'GeneName')
map<-read.csv("dorothea_TF_mapping.csv")
#Run DoRothEA and convert from gene symbol to uniprot ID
TF_genesymbol<-runDoRothEA(df, regulon=viper_regulon,
confidence_level=c('A','B','C'))
TF_uniprot<-GeneSymbol2Uniprot(TF_genesymbol, map, 1, 2)
#Generate measurement files in CARNIVAL input format
generate_measfile(measurements=TF_uniprot, topnumber=50,
write2folder="measurements")
## Loading weight matrix of PROGENy
file.copy(from=system.file("model_NatComm+14_human.csv",package="CARNIVAL"),
to=getwd(),overwrite=TRUE)
weight_matrix<-read.csv("model_NatComm+14_human.csv")
df_genenames<-data.frame('gene'=rownames(df),df)
## Run PROGENy
pathway_scores<-runPROGENy(df_genenames,weight_matrix, z_scores = F)
load(file = system.file("Ex2_inputs_SBV_EGF.RData",
package="CARNIVAL"))
load(file = system.file("Ex2_measurements_SBV_EGF.RData",
package="CARNIVAL"))
load(file = system.file("Ex2_network_SBV_Omnipath.RData",
package="CARNIVAL"))
load(file = system.file("progenyMembers.RData",package="CARNIVAL"))
## pathway_scores as generated as described in section 3.1
weightObj <- assignPROGENyScores(progeny = t(pathway_scores),
progenyMembers = progenyMembers,
id = "uniprot")
weightObj
result2 = runCARNIVAL(solverPath=solverPath,
netObj = Ex2_network_SBV_Omnipath,measObj = Ex2_measurements_SBV_EGF,
inputObj = Ex2_inputs_SBV_EGF,
weightObj = weightObj,
timelimit = 3600,
poolCap = 100,
poolReplace = 2,
limitPop = 500,
nodeID = "uniprot",
UP2GS = TRUE,
DOTfig = TRUE,
solver = "cplex")
solverPath = "~/Documents/cplex"
result2 = runCARNIVAL(solverPath=solverPath,
netObj = Ex2_network_SBV_Omnipath,measObj = Ex2_measurements_SBV_EGF,
inputObj = Ex2_inputs_SBV_EGF,
weightObj = weightObj,
timelimit = 3600,
poolCap = 100,
poolReplace = 2,
limitPop = 500,
nodeID = "uniprot",
UP2GS = TRUE,
DOTfig = TRUE,
solver = "cplex")
rm(list = ls())
getwd()
setwd("~/Documents/GitHub/CARNIVAL-Bioconductor-Dev/R/")
#'\code{solveCPLEX}
#'
#'@return result object after solving with CARNIVAL
#'
#'@export
#'
solveCPLEX <- function(solverPath=solverPath,
condition=condition,
repIndex=repIndex,
variables=variables,
pknList=pknList,
inputObj=inputObj,
measObj=measObj,
dir_name=dir_name,
UP2GS=UP2GS){
if (Sys.info()[1]=="Windows") {
file.copy(from = solverPath,to = getwd())
system(paste0("cplex.exe -f cplexCommand_",
condition,"_",repIndex,".txt"))
file.remove("cplex.exe")
Elapsed_2 <- proc.time() - ptm
} else {
system(paste0(solverPath, " -f cplexCommand_",
condition,"_",repIndex,".txt"))
Elapsed_2 <- proc.time() - ptm
}
# cleanupCARNIVAL(condition = condition, repIndex = repIndex)
# Write result files in the results folder
ptm <- proc.time()
print("Writing result files...")
resList <- list()
# if (file.exists(paste0("results/",dir_name,"/results_cplex.txt"))) {
if (file.exists(paste0("results_cplex_",condition,"_",repIndex,".txt"))) {
for(i in 1:length(variables)){
res <- exportResult(cplexSolutionFileName = paste0("results_cplex_",
condition,"_",
repIndex,".txt"),
variables = variables,
pknList = pknList,
conditionIDX = i,
inputs=inputObj,
measurements=measObj)
resList[[length(resList)+1]] <- res
}
if (!is.null(res)) {
if(!is.null(UP2GS)){if (UP2GS) {res <- Uniprot2GeneSymbol(res)}}
if (DOTfig) {WriteDOTfig(res=res,
dir_name=dir_name,
inputs=inputObj,
measurements=measObj,
UP2GS=UP2GS)}
}
} else {
print("No result to be written")
return(NULL)
}
Elapsed_3 <- proc.time() - ptm
cleanupCARNIVAL(condition = condition, repIndex = repIndex)
# Remove global variable
objs <- ls(pos = ".GlobalEnv")
rm(list = objs[grep("pknList", objs)], pos = ".GlobalEnv")
print(" ")
print("--- End of the CARNIVAL pipeline ---")
print(" ")
result = resList[[1]]
return(result)
}
#'\code{writeSolverFiles}
#'
#'@return result object after solving with CARNIVAL
#'
#'@export
#'
writeSolverFiles <- function(condition=condition, repIndex=repIndex, oF=oF,
allC=allC, bounds=bounds, binaries=binaries,
generals=generals, mipGAP=mipGAP,
poolrelGAP=poolrelGAP, poolReplace=poolReplace,
limitPop=limitPop, poolCap=poolCap,
poolIntensity=poolIntensity, timelimit=timelimit){
## write the .lp file
data = paste0("testFile_", condition,"_",repIndex,".lp")
write("enter Problem", data)
write("", data, append = TRUE)
write("Minimize", data, append = TRUE)
write(oF, data, append = TRUE)
write("Subject To", data, append = TRUE)
write(allC, data, append = TRUE)
write("Bounds", data, append = TRUE)
write(bounds, data, append = TRUE)
write("Binaries", data, append = TRUE)
write(binaries, data, append = TRUE)
write("Generals", data, append = TRUE)
write(generals, data, append = TRUE)
write("End", data, append = TRUE)
## write cplexCommand file
cplexCommand <- paste0("cplexCommand_", condition,"_",repIndex,".txt")
write(paste0("read testFile_", condition,"_",repIndex,".lp"), cplexCommand, append = TRUE)
write(paste0("set mip tolerances mipgap ",mipGAP), cplexCommand, append = TRUE)
write(paste0("set mip pool relgap ",poolrelGAP), cplexCommand, append = TRUE)
write(paste0("set mip pool replace ", poolReplace), cplexCommand, append = TRUE)
write(paste0("set mip limits populate ",limitPop), cplexCommand, append = TRUE)
write(paste0("set mip pool capacity ",poolCap), cplexCommand, append = TRUE)
write(paste0("set mip pool intensity ",poolIntensity), cplexCommand, append = TRUE)
write(paste0("set timelimit ",timelimit), cplexCommand, append = TRUE)
write("populate", cplexCommand, append = TRUE)
write(paste0("write results_cplex_", condition,"_",repIndex,".txt sol all"), cplexCommand, append = TRUE)
write("quit", cplexCommand, append = TRUE)
}
getwd()
