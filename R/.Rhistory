} else {
dir_name <- Result_dir
}
dir.create(dir_name); setwd(current_dir)
# Load CARNIVAL example files (if defined)
if (!is.null(CARNIVAL_example)) {
loaded_CARNIVAL <- load_CARNIVAL_examples(CARNIVAL_example)
netFile <- loaded_CARNIVAL$netFile
measFile <- loaded_CARNIVAL$measFile
inputFile <- loaded_CARNIVAL$inputFile
weightFile <- loaded_CARNIVAL$weightFile
}
# Input processing
network <- read.table(file = netFile, sep = "\t", header = TRUE)
measWeights <- as.matrix(read_delim(file = measFile, delim = "\t", escape_double = FALSE, trim_ws = TRUE))
measurements <- sign(measWeights)
if (!is.null(inputFile)) {
inputs <- read.table(file = inputFile, sep = "\t", header = TRUE)
}
if (!is.null(weightFile)) {
edgeWeights <- read_delim(file = weightFile, delim = "\t", escape_double = FALSE, trim_ws = TRUE)
scores <- assignPROGENyScores(progeny = edgeWeights, progenyMembers = progenyMembers, id = nodeID)
} else {
scores <- NULL
}
# Adding perturbation node for the case of inverse causal reasoning
if (inverseCR) {
MappedPertNode <- AddPerturbationNode(network)
inputs <- MappedPertNode$inputs
network <- MappedPertNode$network
}
# data <- measurements
pknList <- as.data.frame(network)
colnames(pknList) <- c("Node1", "Sign", "Node2")
setwd(paste0(current_dir,"/../R/")) # temporary shift to src directory
# Remove intermediate cplex files (if any)
AllFiles <- list.files()
CloneFiles <- which(grepl(pattern = "clone",x = AllFiles,fixed = T))
if (length(CloneFiles)>0) {
for (counter in 1:length(CloneFiles)) {
file.remove(AllFiles[CloneFiles[counter]])
}
}
# Remove redundant files prior to optimisation
if (file.exists(paste0("testFile_",condition,"_",repIndex,".lp"))) {file.remove(paste0("testFile_",condition,"_",repIndex,".lp"))} # might be useful for debugging
if (file.exists(paste0("results_cplex_",condition, "_",repIndex,".txt"))) {file.remove(paste0("results_cplex_",condition,"_",repIndex,".txt"))}
if (file.exists("cplex.log")) {file.remove("cplex.log")}
if (file.exists("cplexCommand.txt")) {file.remove("cplexCommand.txt")}
# Write constraints as ILP inputs
ptm <- proc.time()
print("Writing constraints...")
variables <- writeLPFile(data=measurements,pknList=pknList,inputs=inputs,cutoff=0.1,betaWeight=betaWeight,
scores=scores,mipGAP=mipGAP,poolrelGAP=poolrelGAP,limitPop=limitPop,
poolCap=poolCap,poolIntensity=poolIntensity,poolReplace=poolReplace,
timelimit=timelimit,nodeWeights=nodeWeights,measWeights=measWeights,
repIndex=repIndex,condition = condition)
Elapsed_1 <- proc.time() - ptm
# Solve ILP problem with cplex, remove temp files, and return to the main directory
ptm <- proc.time()
print("Solving LP problem...")
system(paste0(getwd(), "/cplex -f cplexCommand.txt"))
Elapsed_2 <- proc.time() - ptm
# Move result files to result folder and remove redundant files after the optimisation
if (file.exists(paste0("testFile_",condition,"_",repIndex,".lp"))) {file.remove(paste0("testFile_",condition,"_",repIndex,".lp"))} # might be useful for debugging
if (file.exists(paste0("results_cplex_",condition, "_",repIndex,".txt"))) {file.copy(from = paste0("results_cplex_",condition,"_",repIndex,".txt"),to = paste(current_dir,"/results/",dir_name,"/results_cplex.txt",sep="")); file.remove(paste0("results_cplex_",condition,"_",repIndex,".txt"))}
if (file.exists("cplex.log")) {file.copy(from = "cplex.log",to = paste(current_dir,"/results/",dir_name,"/cplex.log",sep="")); file.remove("cplex.log")}
if (file.exists("cplexCommand.txt")) {file.remove("cplexCommand.txt")}
setwd(current_dir)
# Write result files in the results folder
ptm <- proc.time()
print("Writing result files...")
if (file.exists(paste0("results/",dir_name,"/results_cplex.txt"))) {
for(i in 1:length(variables)){
res <- exportResult(cplexSolutionFileName = paste0("results/",dir_name,"/results_cplex.txt"),
variables = variables, pknList = pknList, conditionIDX = i,
dir_name = dir_name, inputs=inputs,measurements=measurements,
Export_all = Export_all,writeIndividualResults = T)
# res <- files2res(dir_name) # retrieve results from previously generated result files
}
if (UP2GS) {res <- Uniprot2GeneSymbol(res)}
if (DOTfig) {WriteDOTfig(res=res,dir_name=dir_name,
inputs=inputs,measurements=measurements,UP2GS=UP2GS)}
# if (DOTfig) {WriteDOTfig(res=res,idxModel=c(1,2),dir_name=dir_name,
#                             inputs=inputs,measurements=measurements,UP2GS=UP2GS)}
save(res,file = paste0("results/",dir_name,"/results_CARNIVAL.Rdata"))
} else {
print("No result to be written")
}
Elapsed_3 <- proc.time() - ptm
file.remove(paste0("results/",dir_name,"/results_cplex.txt")) # optional; remove cplex results (to save space)
# Logged computational time
ElapsedAll <- as.data.frame(matrix(t(c(Elapsed_1[3],Elapsed_2[3],Elapsed_3[3])),3,1))
rownames(ElapsedAll) <- c("WriteConstraints:","CplexSolving:","ExportResults:")
write.table(x = ElapsedAll,file = paste0("results/",dir_name,"/elapsed_time.txt"),col.names = F,row.names = T,quote = F)
# --- End of script --- #
Sys.setenv(TZ='CEST')
Sys.time()
Sys.setenv(TZ='CEST')
str(OlsonNames())
TZ <- str(OlsonNames())
OlsonNames()
Sys.setenv(TZ="Europe/Berlin")
Sys.time()
# ---------------------- #
# CARNIVAL driver script #
# ---------------------- #
# set working directory and clear working environment
# setwd("~/GitHub/CARNIVAL")
rm(list=ls());cat("\014");if(length(dev.list())>0){dev.off()}
library(devtools)
load_all() # load CARNIVAL package
# Choose from our CARNIVAL examples (Ex1 = Toy model; Ex2 = SBVimprover-EGF)
CARNIVAL_example <- 1 # c(1,2); if not, set to 'NULL'
# Or assign your input files here
netFile <-  "your_network_file.sif" # required
measFile <- "your_measurement_file.txt" # required
inputFile <- "your_input_target_file.txt" # optional; if not, set to 'NULL'
weightFile <-  "your_node_weight_file.txt" # optional; if not, set to 'NULL'
# Choose CARNIVAL settings
Result_dir  <- NULL # specify a name for result directory; if NULL, then date and time will be used by default
parallelCR <- F # running parallelised version?
inverseCR <- T # running inverse causal reasoning version?
nodeID <- "uniprot" # choose between 'uniprot' or 'gene'
UP2GS <- T # Convert UniProtIDs to Gene Symbols?
DOTfig <- T #  write DOT figure?
Export_all<- F #  export all ILP variables or not; if 0, only predicted node values and sif file will be written
# Set CPLEX stopping criteria
mipGAP        <- 0.1 # in proportion to the best estimated integer solution
poolrelGAP    <- 0 # in relative to the pool of best solution
limitPop      <- 100 # limit the number of populated solutions after identified best solution
poolCap       <- 10 # limit the pool size to store populated solution
poolIntensity <- 4 # (for populating) select search intensity [0 default/ 1 to 4]
poolReplace   <- 2 # select replacement strategy of the pool solution [0 default/ 1 to 2]
# alphaWeight   <- 1 # [default 100] coefficient of fitting error in objective function
betaWeight    <- 0.2 # [default 0.2] coefficient of model size in objective function
timelimit     <- 1800 # set time limit for cplex optimisation (in seconds)
# ================================================= #
# ===== Press Run to perform the optimisation ===== #
# ================================================= #
# Load necessary packages and functions
library(readr)
library(tidyr)
library(igraph)
load(file = system.file("progenyMembers.RData",package="CARNIVAL"))
# Assign parallelisation parameters
if (parallelCR) {
library(doParallel)
argsJob=commandArgs(trailingOnly = TRUE)
repIndex <- as.numeric(argsJob[1])
condition <- as.character(argsJob[2]) #Can additionally be used to loop over conditions of interest
} else {
repIndex=1;condition=1
}
# Create a directory to store results
current_dir <- getwd()
dir.create("results",showWarnings = FALSE)
setwd(paste(current_dir,"/results",sep=""))
if (is.null(Result_dir)) {
Sys.setenv(TZ="Europe/Berlin")
dir_name <- paste("results_",Sys.time(),sep="")
} else {
dir_name <- Result_dir
}
dir.create(dir_name); setwd(current_dir)
# Load CARNIVAL example files (if defined)
if (!is.null(CARNIVAL_example)) {
loaded_CARNIVAL <- load_CARNIVAL_examples(CARNIVAL_example)
netFile <- loaded_CARNIVAL$netFile
measFile <- loaded_CARNIVAL$measFile
inputFile <- loaded_CARNIVAL$inputFile
weightFile <- loaded_CARNIVAL$weightFile
}
# Input processing
network <- read.table(file = netFile, sep = "\t", header = TRUE)
measWeights <- as.matrix(read_delim(file = measFile, delim = "\t", escape_double = FALSE, trim_ws = TRUE))
measurements <- sign(measWeights)
if (!is.null(inputFile)) {
inputs <- read.table(file = inputFile, sep = "\t", header = TRUE)
}
if (!is.null(weightFile)) {
edgeWeights <- read_delim(file = weightFile, delim = "\t", escape_double = FALSE, trim_ws = TRUE)
scores <- assignPROGENyScores(progeny = edgeWeights, progenyMembers = progenyMembers, id = nodeID)
} else {
scores <- NULL
}
# Adding perturbation node for the case of inverse causal reasoning
if (inverseCR) {
MappedPertNode <- AddPerturbationNode(network)
inputs <- MappedPertNode$inputs
network <- MappedPertNode$network
}
# data <- measurements
pknList <- as.data.frame(network)
colnames(pknList) <- c("Node1", "Sign", "Node2")
setwd(paste0(current_dir,"/../R/")) # temporary shift to src directory
# Remove intermediate cplex files (if any)
AllFiles <- list.files()
CloneFiles <- which(grepl(pattern = "clone",x = AllFiles,fixed = T))
if (length(CloneFiles)>0) {
for (counter in 1:length(CloneFiles)) {
file.remove(AllFiles[CloneFiles[counter]])
}
}
# Remove redundant files prior to optimisation
if (file.exists(paste0("testFile_",condition,"_",repIndex,".lp"))) {file.remove(paste0("testFile_",condition,"_",repIndex,".lp"))} # might be useful for debugging
if (file.exists(paste0("results_cplex_",condition, "_",repIndex,".txt"))) {file.remove(paste0("results_cplex_",condition,"_",repIndex,".txt"))}
if (file.exists("cplex.log")) {file.remove("cplex.log")}
if (file.exists("cplexCommand.txt")) {file.remove("cplexCommand.txt")}
# Write constraints as ILP inputs
ptm <- proc.time()
print("Writing constraints...")
variables <- writeLPFile(data=measurements,pknList=pknList,inputs=inputs,cutoff=0.1,betaWeight=betaWeight,
scores=scores,mipGAP=mipGAP,poolrelGAP=poolrelGAP,limitPop=limitPop,
poolCap=poolCap,poolIntensity=poolIntensity,poolReplace=poolReplace,
timelimit=timelimit,nodeWeights=nodeWeights,measWeights=measWeights,
repIndex=repIndex,condition = condition)
Elapsed_1 <- proc.time() - ptm
# Solve ILP problem with cplex, remove temp files, and return to the main directory
ptm <- proc.time()
print("Solving LP problem...")
system(paste0(getwd(), "/cplex -f cplexCommand.txt"))
Elapsed_2 <- proc.time() - ptm
# Move result files to result folder and remove redundant files after the optimisation
if (file.exists(paste0("testFile_",condition,"_",repIndex,".lp"))) {file.remove(paste0("testFile_",condition,"_",repIndex,".lp"))} # might be useful for debugging
if (file.exists(paste0("results_cplex_",condition, "_",repIndex,".txt"))) {file.copy(from = paste0("results_cplex_",condition,"_",repIndex,".txt"),to = paste(current_dir,"/results/",dir_name,"/results_cplex.txt",sep="")); file.remove(paste0("results_cplex_",condition,"_",repIndex,".txt"))}
if (file.exists("cplex.log")) {file.copy(from = "cplex.log",to = paste(current_dir,"/results/",dir_name,"/cplex.log",sep="")); file.remove("cplex.log")}
if (file.exists("cplexCommand.txt")) {file.remove("cplexCommand.txt")}
setwd(current_dir)
# Write result files in the results folder
ptm <- proc.time()
print("Writing result files...")
if (file.exists(paste0("results/",dir_name,"/results_cplex.txt"))) {
for(i in 1:length(variables)){
res <- exportResult(cplexSolutionFileName = paste0("results/",dir_name,"/results_cplex.txt"),
variables = variables, pknList = pknList, conditionIDX = i,
dir_name = dir_name, inputs=inputs,measurements=measurements,
Export_all = Export_all,writeIndividualResults = T)
# res <- files2res(dir_name) # retrieve results from previously generated result files
}
if (UP2GS) {res <- Uniprot2GeneSymbol(res)}
if (DOTfig) {WriteDOTfig(res=res,dir_name=dir_name,
inputs=inputs,measurements=measurements,UP2GS=UP2GS)}
# if (DOTfig) {WriteDOTfig(res=res,idxModel=c(1,2),dir_name=dir_name,
#                             inputs=inputs,measurements=measurements,UP2GS=UP2GS)}
save(res,file = paste0("results/",dir_name,"/results_CARNIVAL.Rdata"))
} else {
print("No result to be written")
}
Elapsed_3 <- proc.time() - ptm
file.remove(paste0("results/",dir_name,"/results_cplex.txt")) # optional; remove cplex results (to save space)
# Logged computational time
ElapsedAll <- as.data.frame(matrix(t(c(Elapsed_1[3],Elapsed_2[3],Elapsed_3[3])),3,1))
rownames(ElapsedAll) <- c("WriteConstraints:","CplexSolving:","ExportResults:")
write.table(x = ElapsedAll,file = paste0("results/",dir_name,"/elapsed_time.txt"),col.names = F,row.names = T,quote = F)
# --- End of script --- #
# ---------------------- #
# CARNIVAL driver script #
# ---------------------- #
# set working directory and clear working environment
# setwd("~/GitHub/CARNIVAL")
rm(list=ls());cat("\014");if(length(dev.list())>0){dev.off()}
library(devtools)
load_all() # load CARNIVAL package
# Choose from our CARNIVAL examples (Ex1 = Toy model; Ex2 = SBVimprover-EGF)
CARNIVAL_example <- 1 # c(1,2); if not, set to 'NULL'
# Or assign your input files here
netFile <-  "your_network_file.sif" # required
measFile <- "your_measurement_file.txt" # required
inputFile <- "your_input_target_file.txt" # optional; if not, set to 'NULL'
weightFile <-  "your_node_weight_file.txt" # optional; if not, set to 'NULL'
# Choose CARNIVAL settings
Result_dir  <- NULL # specify a name for result directory; if NULL, then date and time will be used by default
parallelCR <- F # running parallelised version?
inverseCR <- F # running inverse causal reasoning version?
nodeID <- "uniprot" # choose between 'uniprot' or 'gene'
UP2GS <- T # Convert UniProtIDs to Gene Symbols?
DOTfig <- T #  write DOT figure?
Export_all<- F #  export all ILP variables or not; if 0, only predicted node values and sif file will be written
# Set CPLEX stopping criteria
mipGAP        <- 0.1 # in proportion to the best estimated integer solution
poolrelGAP    <- 0 # in relative to the pool of best solution
limitPop      <- 100 # limit the number of populated solutions after identified best solution
poolCap       <- 10 # limit the pool size to store populated solution
poolIntensity <- 4 # (for populating) select search intensity [0 default/ 1 to 4]
poolReplace   <- 2 # select replacement strategy of the pool solution [0 default/ 1 to 2]
# alphaWeight   <- 1 # [default 100] coefficient of fitting error in objective function
betaWeight    <- 0.2 # [default 0.2] coefficient of model size in objective function
timelimit     <- 1800 # set time limit for cplex optimisation (in seconds)
# ================================================= #
# ===== Press Run to perform the optimisation ===== #
# ================================================= #
# Load necessary packages and functions
library(readr)
library(tidyr)
library(igraph)
load(file = system.file("progenyMembers.RData",package="CARNIVAL"))
# Assign parallelisation parameters
if (parallelCR) {
library(doParallel)
argsJob=commandArgs(trailingOnly = TRUE)
repIndex <- as.numeric(argsJob[1])
condition <- as.character(argsJob[2]) #Can additionally be used to loop over conditions of interest
} else {
repIndex=1;condition=1
}
# Create a directory to store results
current_dir <- getwd()
dir.create("results",showWarnings = FALSE)
setwd(paste(current_dir,"/results",sep=""))
if (is.null(Result_dir)) {
Sys.setenv(TZ="Europe/Berlin")
dir_name <- paste("results_",Sys.time(),sep="")
} else {
dir_name <- Result_dir
}
dir.create(dir_name); setwd(current_dir)
# Load CARNIVAL example files (if defined)
if (!is.null(CARNIVAL_example)) {
loaded_CARNIVAL <- load_CARNIVAL_examples(CARNIVAL_example)
netFile <- loaded_CARNIVAL$netFile
measFile <- loaded_CARNIVAL$measFile
inputFile <- loaded_CARNIVAL$inputFile
weightFile <- loaded_CARNIVAL$weightFile
}
# Input processing
network <- read.table(file = netFile, sep = "\t", header = TRUE)
measWeights <- as.matrix(read_delim(file = measFile, delim = "\t", escape_double = FALSE, trim_ws = TRUE))
measurements <- sign(measWeights)
if (!is.null(inputFile)) {
inputs <- read.table(file = inputFile, sep = "\t", header = TRUE)
}
if (!is.null(weightFile)) {
edgeWeights <- read_delim(file = weightFile, delim = "\t", escape_double = FALSE, trim_ws = TRUE)
scores <- assignPROGENyScores(progeny = edgeWeights, progenyMembers = progenyMembers, id = nodeID)
} else {
scores <- NULL
}
# Adding perturbation node for the case of inverse causal reasoning
if (inverseCR) {
MappedPertNode <- AddPerturbationNode(network)
inputs <- MappedPertNode$inputs
network <- MappedPertNode$network
}
# data <- measurements
pknList <- as.data.frame(network)
colnames(pknList) <- c("Node1", "Sign", "Node2")
setwd(paste0(current_dir,"/../R/")) # temporary shift to src directory
# Remove intermediate cplex files (if any)
AllFiles <- list.files()
CloneFiles <- which(grepl(pattern = "clone",x = AllFiles,fixed = T))
if (length(CloneFiles)>0) {
for (counter in 1:length(CloneFiles)) {
file.remove(AllFiles[CloneFiles[counter]])
}
}
# Remove redundant files prior to optimisation
if (file.exists(paste0("testFile_",condition,"_",repIndex,".lp"))) {file.remove(paste0("testFile_",condition,"_",repIndex,".lp"))} # might be useful for debugging
if (file.exists(paste0("results_cplex_",condition, "_",repIndex,".txt"))) {file.remove(paste0("results_cplex_",condition,"_",repIndex,".txt"))}
if (file.exists("cplex.log")) {file.remove("cplex.log")}
if (file.exists("cplexCommand.txt")) {file.remove("cplexCommand.txt")}
# Write constraints as ILP inputs
ptm <- proc.time()
print("Writing constraints...")
variables <- writeLPFile(data=measurements,pknList=pknList,inputs=inputs,cutoff=0.1,betaWeight=betaWeight,
scores=scores,mipGAP=mipGAP,poolrelGAP=poolrelGAP,limitPop=limitPop,
poolCap=poolCap,poolIntensity=poolIntensity,poolReplace=poolReplace,
timelimit=timelimit,nodeWeights=nodeWeights,measWeights=measWeights,
repIndex=repIndex,condition = condition)
Elapsed_1 <- proc.time() - ptm
# Solve ILP problem with cplex, remove temp files, and return to the main directory
ptm <- proc.time()
print("Solving LP problem...")
system(paste0(getwd(), "/cplex -f cplexCommand.txt"))
Elapsed_2 <- proc.time() - ptm
# Move result files to result folder and remove redundant files after the optimisation
if (file.exists(paste0("testFile_",condition,"_",repIndex,".lp"))) {file.remove(paste0("testFile_",condition,"_",repIndex,".lp"))} # might be useful for debugging
if (file.exists(paste0("results_cplex_",condition, "_",repIndex,".txt"))) {file.copy(from = paste0("results_cplex_",condition,"_",repIndex,".txt"),to = paste(current_dir,"/results/",dir_name,"/results_cplex.txt",sep="")); file.remove(paste0("results_cplex_",condition,"_",repIndex,".txt"))}
if (file.exists("cplex.log")) {file.copy(from = "cplex.log",to = paste(current_dir,"/results/",dir_name,"/cplex.log",sep="")); file.remove("cplex.log")}
if (file.exists("cplexCommand.txt")) {file.remove("cplexCommand.txt")}
setwd(current_dir)
# Write result files in the results folder
ptm <- proc.time()
print("Writing result files...")
if (file.exists(paste0("results/",dir_name,"/results_cplex.txt"))) {
for(i in 1:length(variables)){
res <- exportResult(cplexSolutionFileName = paste0("results/",dir_name,"/results_cplex.txt"),
variables = variables, pknList = pknList, conditionIDX = i,
dir_name = dir_name, inputs=inputs,measurements=measurements,
Export_all = Export_all,writeIndividualResults = T)
# res <- files2res(dir_name) # retrieve results from previously generated result files
}
if (UP2GS) {res <- Uniprot2GeneSymbol(res)}
if (DOTfig) {WriteDOTfig(res=res,dir_name=dir_name,
inputs=inputs,measurements=measurements,UP2GS=UP2GS)}
# if (DOTfig) {WriteDOTfig(res=res,idxModel=c(1,2),dir_name=dir_name,
#                             inputs=inputs,measurements=measurements,UP2GS=UP2GS)}
save(res,file = paste0("results/",dir_name,"/results_CARNIVAL.Rdata"))
} else {
print("No result to be written")
}
Elapsed_3 <- proc.time() - ptm
file.remove(paste0("results/",dir_name,"/results_cplex.txt")) # optional; remove cplex results (to save space)
# Logged computational time
ElapsedAll <- as.data.frame(matrix(t(c(Elapsed_1[3],Elapsed_2[3],Elapsed_3[3])),3,1))
rownames(ElapsedAll) <- c("WriteConstraints:","CplexSolving:","ExportResults:")
write.table(x = ElapsedAll,file = paste0("results/",dir_name,"/elapsed_time.txt"),col.names = F,row.names = T,quote = F)
# --- End of script --- #
# set working directory and clear working environment
# setwd("~/GitHub/CARNIVAL")
rm(list=ls());cat("\014");if(length(dev.list())>0){dev.off()}
library(devtools)
load_all() # load CARNIVAL package
# Choose from our CARNIVAL examples (Ex1 = Toy model; Ex2 = TG-GATEs-APAP; Ex3 = SBVimprover-EGF)
CARNIVAL_example <- 3 # c(1,2,3); if not, set to 'NULL'
# Or assign your input files here
netFile <-  "your_network_file.sif" # required
measFile <- "your_measurement_file.txt" # required
inputFile <- "your_input_target_file.txt" # optional; if not, set to 'NULL'
weightFile <-  "your_node_weight_file.txt" # optional; if not, set to 'NULL'
# Choose CARNIVAL settings
Result_dir  <- NULL # specify a name for result directory; if NULL, then date and time will be used by default
Sys.setenv(TZ="Europe/Berlin") # optional; set time zone to as default results' foldername
parallelCR <- F # running parallelised version?
inverseCR <- F # running inverse causal reasoning version?
nodeID <- "uniprot" # choose between 'uniprot' or 'gene'
UP2GS <- T # Convert UniProtIDs to Gene Symbols?
DOTfig <- T #  write DOT figure?
Export_all<- F #  export all ILP variables or not; if 0, only predicted node values and sif file will be written
# Set CPLEX stopping criteria
mipGAP        <- 0.1 # in proportion to the best estimated integer solution
poolrelGAP    <- 0 # in relative to the pool of best solution
limitPop      <- 100 # limit the number of populated solutions after identified best solution
poolCap       <- 10 # limit the pool size to store populated solution
poolIntensity <- 4 # (for populating) select search intensity [0 default/ 1 to 4]
poolReplace   <- 2 # select replacement strategy of the pool solution [0 default/ 1 to 2]
# alphaWeight   <- 1 # [default 100] coefficient of fitting error in objective function
betaWeight    <- 0.2 # [default 0.2] coefficient of model size in objective function
timelimit     <- 1800 # set time limit for cplex optimisation (in seconds)
# Load necessary packages and functions
library(readr)
library(tidyr)
library(igraph)
load(file = system.file("progenyMembers.RData",package="CARNIVAL"))
# Assign parallelisation parameters
if (parallelCR) {
library(doParallel)
argsJob=commandArgs(trailingOnly = TRUE)
repIndex <- as.numeric(argsJob[1])
condition <- as.character(argsJob[2]) #Can additionally be used to loop over conditions of interest
} else {
repIndex=1;condition=1
}
# Create a directory to store results
current_dir <- getwd()
dir.create("results",showWarnings = FALSE)
setwd(paste(current_dir,"/results",sep=""))
if (is.null(Result_dir)) {
dir_name <- paste("results_",Sys.time(),sep="")
} else {
dir_name <- Result_dir
}
dir.create(dir_name); setwd(current_dir)
# Load CARNIVAL example files (if defined)
if (!is.null(CARNIVAL_example)) {
loaded_CARNIVAL <- load_CARNIVAL_examples(CARNIVAL_example)
netFile <- loaded_CARNIVAL$netFile
measFile <- loaded_CARNIVAL$measFile
inputFile <- loaded_CARNIVAL$inputFile
weightFile <- loaded_CARNIVAL$weightFile
}
# Input processing
network <- read.table(file = netFile, sep = "\t", header = TRUE)
measWeights <- as.matrix(read_delim(file = measFile, delim = "\t", escape_double = FALSE, trim_ws = TRUE))
measurements <- sign(measWeights)
if (!is.null(inputFile)) {
inputs <- read.table(file = inputFile, sep = "\t", header = TRUE)
}
if (!is.null(weightFile)) {
edgeWeights <- read_delim(file = weightFile, delim = "\t", escape_double = FALSE, trim_ws = TRUE)
scores <- assignPROGENyScores(progeny = edgeWeights, progenyMembers = progenyMembers, id = nodeID)
} else {
scores <- NULL
}
# Adding perturbation node for the case of inverse causal reasoning
if (inverseCR) {
MappedPertNode <- AddPerturbationNode(network)
inputs <- MappedPertNode$inputs
network <- MappedPertNode$network
}
data <- measurements
pknList <- as.data.frame(network)
colnames(pknList) <- c("Node1", "Sign", "Node2")
setwd(paste0(current_dir,"/../R/")) # temporary shift to src directory
# Remove intermediate cplex files (if any)
AllFiles <- list.files()
CloneFiles <- which(grepl(pattern = "clone",x = AllFiles,fixed = T))
if (length(CloneFiles)>0) {
for (counter in 1:length(CloneFiles)) {
file.remove(AllFiles[CloneFiles[counter]])
}
}
# Remove redundant files prior to optimisation
if (file.exists(paste0("testFile_",condition,"_",repIndex,".lp"))) {file.remove(paste0("testFile_",condition,"_",repIndex,".lp"))} # might be useful for debugging
if (file.exists(paste0("results_cplex_",condition, "_",repIndex,".txt"))) {file.remove(paste0("results_cplex_",condition,"_",repIndex,".txt"))}
if (file.exists("cplex.log")) {file.remove("cplex.log")}
if (file.exists("cplexCommand.txt")) {file.remove("cplexCommand.txt")}
cutoff=0.1
data=measurments
data=measurements
data
dataMatrix <- buildDataMatrix(data = data, pknList = pknList, inputs = inputs, cutoff = 0.1)
dataMatrix
