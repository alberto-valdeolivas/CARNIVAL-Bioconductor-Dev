p <- p + My_Theme
save(df, file = "df.RData")
plot(p)
rm(list = ls())
# Simple example on how to use and run the ILP implementation of CellNOpt
# Loading the libraries
library(CellNOptR)
library(igraph)
library(readr)
library(stringr)
library(ggplot2)
library(readr)
library(reshape2)
library(reshape)
# cases = c("ToyPB", "ToyPCB", "ExtLiverPriHu-MCP2010", "ExtLiverPCB", "ExtLiverBMC2012", "LiverDREAM")
cases = c("ToyMSB2009", "ToyPCB", "ToyPB", "LiverDREAM", "ExtLiverPCB", "ExtLiverPriHu-MCP2010", "ExtLiverBMC2012")
df = matrix(data = , nrow = length(cases), ncol = 7)
colnames(df) = c("Cases", "ILP-CPLEX", "ILP-Total", "ILP-100-CPLEX", "ILP-100-Total", "CASPO", "Model Size")
df[, 1] = cases
for(ii in 1:length(cases)){
opt_time <- read_delim(paste0("ILPvsCASPO/", cases[ii], "/opt_time.txt"), "\t", escape_double = FALSE, trim_ws = TRUE)
df[ii, 2] = opt_time$Time[1]
df[ii, 3] = opt_time$Time[2]
df[ii, 4] = opt_time$Time[3]
df[ii, 5] = opt_time$Time[4]
df[ii, 6] = opt_time$Time[5]
df[ii, 7] = opt_time$Time[6]
# model = readSIF(sifFile = paste0("ILPvsCASPO/", cases[ii], "/PKN-", cases[ii], ".sif.txt"))
load(file = paste0("ILPvsCASPO/", cases[ii], "/resGA_50.RData"))
df[ii, 7] = length(resGA$bString)
}
df = as.data.frame(df)
df$Cases = as.character(df$Cases)
df$`ILP-CPLEX` = as.numeric(as.character(df$`ILP-CPLEX`))
df$`ILP-Total` = as.numeric(as.character(df$`ILP-Total`))
df$`ILP-100-CPLEX` = as.numeric(as.character(df$`ILP-100-CPLEX`))
df$`ILP-100-Total` = as.numeric(as.character(df$`ILP-100-Total`))
df$CASPO = as.numeric(as.character(df$CASPO))
df$`Model Size` = as.numeric(as.character(df$`Model Size`))
df = df[order(df$`Model Size`, decreasing = FALSE), ]
# df$Cases = paste0(df$Cases, "\n(", df$`Model Size`, " interactions)")
df$Cases = paste0(1:7, ". ", df$Cases, "\n(", df$`Model Size`, " interactions)")
temp = df
df = df[, 1:6]
df = melt(df)
colnames(df) = c("Model", "Case", "Time")
df$Time = log(df$Time)
Optimizer = c()
for(ii in 1:nrow(df)){
if(df$Case[ii]=="CASPO"){
Optimizer = c(Optimizer, "ASP")
} else {
Optimizer= c(Optimizer, "ILP")
}
}
Optimizer = as.data.frame(Optimizer)
df = cbind(df, Optimizer)
df$Optimizer = as.character(df$Optimizer)
df = df[c(15:21, 29:35), ]
df$Case = as.character(df$Case)
df$Case[1:7] = "ILP"
df$Case = as.factor(df$Case)
##
# now plotting the damn thing
My_Theme = theme(
axis.title.x = element_text(size = 16),
axis.text.x = element_text(size = 14, angle = 90),
axis.title.y = element_text(size = 16),
axis.text.y = element_text(size = 14))
p <- ggplot(df, aes(x=Model, y = Time)) +
geom_jitter(position=position_jitter(0.2), aes(shape=Case, colour=Optimizer, size=1200)) +
scale_shape_manual(values=c(15, 17, 18, 1, 19)) +
labs(title="Plot of optimization time for each case study", x="Model", y = "Log of Time (s)") +
theme(legend.text = element_text(size = 15))
p <- p + My_Theme
plot(p)
save(df, file = "df_caspo_vs_ilp.RData")
rm(list = ls())
# Simple example on how to use and run the ILP implementation of CellNOpt
# Loading the libraries
library(CellNOptR)
library(igraph)
library(readr)
library(stringr)
library(ggplot2)
library(readr)
library(reshape2)
library(reshape)
library(dplyr)
# cases = c("ToyPB", "ToyPCB", "ExtLiverPriHu-MCP2010", "ExtLiverPCB", "ExtLiverBMC2012", "LiverDREAM", "ToyMSB2009")
cases = c("ToyMSB2009", "ToyPCB", "ToyPB", "LiverDREAM", "ExtLiverPCB", "ExtLiverPriHu-MCP2010", "ExtLiverBMC2012")
df = matrix(data = , nrow = length(cases), ncol = 16)
colnames(df) = c("Cases", "GA-50", "GA-100", "GA-300", "ILP-CPLEX", "ILP-Total", "ILP-100-CPLEX", "ILP-100-Total", "Optimality-GA-50", "Optimality-GA-100", "Optimality-GA-300", "Optimality-ILP-CPLEX", "Optimality-ILP-Total", "Optimality-ILP-100-CPLEX", "Optimality-ILP-100-Total", "Model Size")
df[, 1] = cases
for(ii in 1:length(cases)){
opt_time <- read_delim(paste0(cases[ii], "/opt_time.txt"), "\t", escape_double = FALSE, trim_ws = TRUE)
load(file = paste0(cases[ii], "/resGA_50.RData"))
ga50 = resGA
load(file = paste0(cases[ii], "/resGA_100.RData"))
ga100 = resGA
load(file = paste0(cases[ii], "/resGA_300.RData"))
ga300 = resGA
df[ii, 2] = opt_time$Time[1]
df[ii, 3] = opt_time$Time[2]
df[ii, 4] = opt_time$Time[3]
df[ii, 5] = opt_time$Time[4]
df[ii, 6] = opt_time$Time[5]
df[ii, 7] = opt_time$Time[6]
df[ii, 8] = opt_time$Time[7]
load(file = paste0(cases[ii], "/resILP.RData"))
bestScore = resILP$bScore
currScore = ga50$bScore
if(currScore > bestScore){
df[ii, 9] = "non-optimal"
} else {
df[ii, 9] = "optimal"
}
currScore = ga100$bScore
if(currScore > bestScore){
df[ii, 10] = "non-optimal"
} else {
df[ii, 10] = "optimal"
}
currScore = ga300$bScore
if(currScore > bestScore){
df[ii, 11] = "non-optimal"
} else {
df[ii, 11] = "optimal"
}
df[ii, 12:15] = "optimal"
df[ii, 16] = length(ga50$bString)
}
df = as.data.frame(df)
df$Cases = as.character(df$Cases)
df$`GA-50` = as.numeric(as.character(df$`GA-50`))
df$`GA-100` = as.numeric(as.character(df$`GA-100`))
df$`GA-300` = as.numeric(as.character(df$`GA-300`))
df$`ILP-CPLEX` = as.numeric(as.character(df$`ILP-CPLEX`))
df$`ILP-Total` = as.numeric(as.character(df$`ILP-Total`))
df$`ILP-100-CPLEX` = as.numeric(as.character(df$`ILP-100-CPLEX`))
df$`ILP-100-Total` = as.numeric(as.character(df$`ILP-100-Total`))
df$`Optimality-GA-50` = as.character(df$`Optimality-GA-50`)
df$`Optimality-GA-100` = as.character(df$`Optimality-GA-100`)
df$`Optimality-GA-300` = as.character(df$`Optimality-GA-300`)
df$`Optimality-ILP-CPLEX` = as.character(df$`Optimality-ILP-CPLEX`)
df$`Optimality-ILP-Total` = as.character(df$`Optimality-ILP-Total`)
df$`Optimality-ILP-100-CPLEX` = as.character(df$`Optimality-ILP-100-CPLEX`)
df$`Optimality-ILP-100-Total` = as.character(df$`Optimality-ILP-100-Total`)
df$`Model Size` = as.numeric(as.character(df$`Model Size`))
df = df[order(df$`Model Size`, decreasing = FALSE), ]
df$Cases = paste0(1:7, ". ", df$Cases, "\n(", df$`Model Size`, " interactions)")
temp = df
df = df[, 1:15]
df = melt(df)
colnames(df)[c(1, 9, 10)] = c("Model", "Case", "Time")
df$Time = log(df$Time)
Optimality = c()
for(ii in 1:nrow(df)){
model = df$Model[ii]
case = as.character(df$Case[ii])
idx1 = which(temp$Cases==model)
idx2 = which(colnames(temp)==paste0("Optimality-", case))
Optimality = c(Optimality, temp[idx1, idx2])
}
Optimality = as.data.frame(Optimality)
df = cbind(df, Optimality)
df$Optimality = as.character(df$Optimality)
# df$Model = as.factor(df$Model)
# df = cbind(df, rep(c(10, 15, 20, 62, 99, 105, 108), 7))
# colnames(df)[12] = "Length"
# df$Model <- factor(df$Model, levels = cases)
# df$Model = as.factor(df$Model)
colnames(df) = c("Model", "Optimality-GA-50", "Optimality-GA-100", "Optimality-GA-300", "Optimality-ILP-Optimization", "Optimality-ILP-Total", "Optimality-ILP-100-Optimization", "Optimality-ILP-100-Total", "Case", "Time", "Optimality")
df = df[1:28, ]
df$Case = as.character(df$Case)
df$Case[22:28] = "ILP"
df$Case = as.factor(df$Case)
##
# now plotting the damn thing
My_Theme = theme(
axis.title.x = element_text(size = 16),
axis.text.x = element_text(size = 14, angle = 90),
axis.title.y = element_text(size = 16),
axis.text.y = element_text(size = 14))
p <- ggplot(df, aes(x=Model, y = Time)) +
geom_jitter(position=position_jitter(0.2), aes(shape=Case, colour=Optimality, size=1200)) +
scale_shape_manual(values=c(17, 18, 15, 3, 4, 8, 13)) +
labs(title="Plot of optimization time for each case study", x="Model", y = "Log of Time (s)") +
theme(legend.text = element_text(size = 15))
p <- p + My_Theme
save(df, file = "df.RData")
p1 = p
plot(p)
# Simple example on how to use and run the ILP implementation of CellNOpt
# Loading the libraries
library(CellNOptR)
library(igraph)
library(readr)
library(stringr)
library(ggplot2)
library(readr)
library(reshape2)
library(reshape)
# cases = c("ToyPB", "ToyPCB", "ExtLiverPriHu-MCP2010", "ExtLiverPCB", "ExtLiverBMC2012", "LiverDREAM")
cases = c("ToyMSB2009", "ToyPCB", "ToyPB", "LiverDREAM", "ExtLiverPCB", "ExtLiverPriHu-MCP2010", "ExtLiverBMC2012")
df = matrix(data = , nrow = length(cases), ncol = 7)
colnames(df) = c("Cases", "ILP-CPLEX", "ILP-Total", "ILP-100-CPLEX", "ILP-100-Total", "CASPO", "Model Size")
df[, 1] = cases
for(ii in 1:length(cases)){
opt_time <- read_delim(paste0("ILPvsCASPO/", cases[ii], "/opt_time.txt"), "\t", escape_double = FALSE, trim_ws = TRUE)
df[ii, 2] = opt_time$Time[1]
df[ii, 3] = opt_time$Time[2]
df[ii, 4] = opt_time$Time[3]
df[ii, 5] = opt_time$Time[4]
df[ii, 6] = opt_time$Time[5]
df[ii, 7] = opt_time$Time[6]
# model = readSIF(sifFile = paste0("ILPvsCASPO/", cases[ii], "/PKN-", cases[ii], ".sif.txt"))
load(file = paste0("ILPvsCASPO/", cases[ii], "/resGA_50.RData"))
df[ii, 7] = length(resGA$bString)
}
df = as.data.frame(df)
df$Cases = as.character(df$Cases)
df$`ILP-CPLEX` = as.numeric(as.character(df$`ILP-CPLEX`))
df$`ILP-Total` = as.numeric(as.character(df$`ILP-Total`))
df$`ILP-100-CPLEX` = as.numeric(as.character(df$`ILP-100-CPLEX`))
df$`ILP-100-Total` = as.numeric(as.character(df$`ILP-100-Total`))
df$CASPO = as.numeric(as.character(df$CASPO))
df$`Model Size` = as.numeric(as.character(df$`Model Size`))
df = df[order(df$`Model Size`, decreasing = FALSE), ]
# df$Cases = paste0(df$Cases, "\n(", df$`Model Size`, " interactions)")
df$Cases = paste0(1:7, ". ", df$Cases, "\n(", df$`Model Size`, " interactions)")
temp = df
df = df[, 1:6]
df = melt(df)
colnames(df) = c("Model", "Case", "Time")
df$Time = log(df$Time)
Optimizer = c()
for(ii in 1:nrow(df)){
if(df$Case[ii]=="CASPO"){
Optimizer = c(Optimizer, "ASP")
} else {
Optimizer= c(Optimizer, "ILP")
}
}
Optimizer = as.data.frame(Optimizer)
df = cbind(df, Optimizer)
df$Optimizer = as.character(df$Optimizer)
df = df[c(15:21, 29:35), ]
df$Case = as.character(df$Case)
df$Case[1:7] = "ILP"
df$Case = as.factor(df$Case)
##
# now plotting the damn thing
My_Theme = theme(
axis.title.x = element_text(size = 16),
axis.text.x = element_text(size = 14, angle = 90),
axis.title.y = element_text(size = 16),
axis.text.y = element_text(size = 14))
p <- ggplot(df, aes(x=Model, y = Time)) +
geom_jitter(position=position_jitter(0.2), aes(shape=Case, colour=Optimizer, size=1200)) +
scale_shape_manual(values=c(15, 17, 18, 1, 19)) +
labs(title="Plot of optimization time for each case study", x="Model", y = "Log of Time (s)") +
theme(legend.text = element_text(size = 15))
p <- p + My_Theme
plot(p)
save(df, file = "df_caspo_vs_ilp.RData")
View(df)
# Simple example on how to use and run the ILP implementation of CellNOpt
# Loading the libraries
library(CellNOptR)
library(igraph)
library(readr)
library(stringr)
library(ggplot2)
library(readr)
library(reshape2)
library(reshape)
# cases = c("ToyPB", "ToyPCB", "ExtLiverPriHu-MCP2010", "ExtLiverPCB", "ExtLiverBMC2012", "LiverDREAM")
cases = c("ToyMSB2009", "ToyPCB", "ToyPB", "LiverDREAM", "ExtLiverPCB", "ExtLiverPriHu-MCP2010", "ExtLiverBMC2012")
df = matrix(data = , nrow = length(cases), ncol = 7)
colnames(df) = c("Cases", "ILP-CPLEX", "ILP-Total", "ILP-100-CPLEX", "ILP-100-Total", "CASPO", "Model Size")
df[, 1] = cases
for(ii in 1:length(cases)){
opt_time <- read_delim(paste0("ILPvsCASPO/", cases[ii], "/opt_time.txt"), "\t", escape_double = FALSE, trim_ws = TRUE)
df[ii, 2] = opt_time$Time[1]
df[ii, 3] = opt_time$Time[2]
df[ii, 4] = opt_time$Time[3]
df[ii, 5] = opt_time$Time[4]
df[ii, 6] = opt_time$Time[5]
df[ii, 7] = opt_time$Time[6]
# model = readSIF(sifFile = paste0("ILPvsCASPO/", cases[ii], "/PKN-", cases[ii], ".sif.txt"))
load(file = paste0("ILPvsCASPO/", cases[ii], "/resGA_50.RData"))
df[ii, 7] = length(resGA$bString)
}
df = as.data.frame(df)
df$Cases = as.character(df$Cases)
df$`ILP-CPLEX` = as.numeric(as.character(df$`ILP-CPLEX`))
df$`ILP-Total` = as.numeric(as.character(df$`ILP-Total`))
df$`ILP-100-CPLEX` = as.numeric(as.character(df$`ILP-100-CPLEX`))
df$`ILP-100-Total` = as.numeric(as.character(df$`ILP-100-Total`))
df$CASPO = as.numeric(as.character(df$CASPO))
df$`Model Size` = as.numeric(as.character(df$`Model Size`))
df = df[order(df$`Model Size`, decreasing = FALSE), ]
# df$Cases = paste0(df$Cases, "\n(", df$`Model Size`, " interactions)")
df$Cases = paste0(1:7, ". ", df$Cases, "\n(", df$`Model Size`, " interactions)")
temp = df
df = df[, 1:6]
df = melt(df)
colnames(df) = c("Model", "Case", "Time")
df$Time = log(df$Time)
Optimizer = c()
for(ii in 1:nrow(df)){
if(df$Case[ii]=="CASPO"){
Optimizer = c(Optimizer, "ASP")
} else {
Optimizer= c(Optimizer, "ILP")
}
}
Optimizer = as.data.frame(Optimizer)
df = cbind(df, Optimizer)
df$Optimizer = as.character(df$Optimizer)
df = df[c(15:21, 29:35), ]
df$Case = as.character(df$Case)
df$Case[1:7] = "ILP"
df$Case = as.factor(df$Case)
df = df[, -c(2)]
##
# now plotting the damn thing
My_Theme = theme(
axis.title.x = element_text(size = 16),
axis.text.x = element_text(size = 14, angle = 90),
axis.title.y = element_text(size = 16),
axis.text.y = element_text(size = 14))
p <- ggplot(df, aes(x=Model, y = Time)) +
geom_jitter(position=position_jitter(0.2), aes(shape=Case, colour=Optimizer, size=1200)) +
scale_shape_manual(values=c(15, 17, 18, 1, 19)) +
labs(title="Plot of optimization time for each case study", x="Model", y = "Log of Time (s)") +
theme(legend.text = element_text(size = 15))
p <- p + My_Theme
plot(p)
save(df, file = "df_caspo_vs_ilp.RData")
# Simple example on how to use and run the ILP implementation of CellNOpt
# Loading the libraries
library(CellNOptR)
library(igraph)
library(readr)
library(stringr)
library(ggplot2)
library(readr)
library(reshape2)
library(reshape)
# cases = c("ToyPB", "ToyPCB", "ExtLiverPriHu-MCP2010", "ExtLiverPCB", "ExtLiverBMC2012", "LiverDREAM")
cases = c("ToyMSB2009", "ToyPCB", "ToyPB", "LiverDREAM", "ExtLiverPCB", "ExtLiverPriHu-MCP2010", "ExtLiverBMC2012")
df = matrix(data = , nrow = length(cases), ncol = 7)
colnames(df) = c("Cases", "ILP-CPLEX", "ILP-Total", "ILP-100-CPLEX", "ILP-100-Total", "CASPO", "Model Size")
df[, 1] = cases
for(ii in 1:length(cases)){
opt_time <- read_delim(paste0("ILPvsCASPO/", cases[ii], "/opt_time.txt"), "\t", escape_double = FALSE, trim_ws = TRUE)
df[ii, 2] = opt_time$Time[1]
df[ii, 3] = opt_time$Time[2]
df[ii, 4] = opt_time$Time[3]
df[ii, 5] = opt_time$Time[4]
df[ii, 6] = opt_time$Time[5]
df[ii, 7] = opt_time$Time[6]
# model = readSIF(sifFile = paste0("ILPvsCASPO/", cases[ii], "/PKN-", cases[ii], ".sif.txt"))
load(file = paste0("ILPvsCASPO/", cases[ii], "/resGA_50.RData"))
df[ii, 7] = length(resGA$bString)
}
df = as.data.frame(df)
df$Cases = as.character(df$Cases)
df$`ILP-CPLEX` = as.numeric(as.character(df$`ILP-CPLEX`))
df$`ILP-Total` = as.numeric(as.character(df$`ILP-Total`))
df$`ILP-100-CPLEX` = as.numeric(as.character(df$`ILP-100-CPLEX`))
df$`ILP-100-Total` = as.numeric(as.character(df$`ILP-100-Total`))
df$CASPO = as.numeric(as.character(df$CASPO))
df$`Model Size` = as.numeric(as.character(df$`Model Size`))
df = df[order(df$`Model Size`, decreasing = FALSE), ]
# df$Cases = paste0(df$Cases, "\n(", df$`Model Size`, " interactions)")
df$Cases = paste0(1:7, ". ", df$Cases, "\n(", df$`Model Size`, " interactions)")
temp = df
df = df[, 1:6]
df = melt(df)
colnames(df) = c("Model", "Case", "Time")
df$Time = log(df$Time)
Optimizer = c()
for(ii in 1:nrow(df)){
if(df$Case[ii]=="CASPO"){
Optimizer = c(Optimizer, "ASP")
} else {
Optimizer= c(Optimizer, "ILP")
}
}
Optimizer = as.data.frame(Optimizer)
df = cbind(df, Optimizer)
df$Optimizer = as.character(df$Optimizer)
df = df[c(15:21, 29:35), ]
df$Case = as.character(df$Case)
df$Case[1:7] = "ILP"
df$Case = as.factor(df$Case)
df = df[, -c(2)]
##
# now plotting the damn thing
My_Theme = theme(
axis.title.x = element_text(size = 16),
axis.text.x = element_text(size = 14, angle = 90),
axis.title.y = element_text(size = 16),
axis.text.y = element_text(size = 14))
# p <- ggplot(df, aes(x=Model, y = Time)) +
#   geom_jitter(position=position_jitter(0.2), aes(shape=Case, colour=Optimizer, size=1200)) +
#   scale_shape_manual(values=c(15, 17, 18, 1, 19)) +
#   labs(title="Plot of optimization time for each case study", x="Model", y = "Log of Time (s)") +
#   theme(legend.text = element_text(size = 15))
# p <- p + My_Theme
# plot(p)
p <- ggplot(df, aes(x=Model, y = Time)) +
geom_jitter(position=position_jitter(0.2), aes(colour=Optimizer, size=1200)) +
scale_shape_manual(values=c(15, 17, 18, 1, 19)) +
labs(title="Plot of optimization time for each case study", x="Model", y = "Log of Time (s)") +
theme(legend.text = element_text(size = 15))
p <- p + My_Theme
plot(p)
save(df, file = "df_caspo_vs_ilp.RData")
rm(list = ls())
getwd()
setwd("~/Desktop")
setwd("~/Documents/GitHub/CARNIVAL-Bioconductor-Dev/")
setwd("~/Documents/GitHub/CARNIVAL-Bioconductor-Dev/inst/")
library(readr)
Ex1_inputs_Toy <- read_delim("~/Documents/GitHub/CARNIVAL-Bioconductor-Dev/inst/Ex1_inputs_Toy.txt",
"\t", escape_double = FALSE, trim_ws = TRUE)
View(Ex1_inputs_Toy)
save(Ex1_inputs_Toy, file = "Ex1_inputs_Toy.RData")
library(readr)
Ex1_measurements_Toy <- read_delim("~/Documents/GitHub/CARNIVAL-Bioconductor-Dev/inst/Ex1_measurements_Toy.txt",
"\t", escape_double = FALSE, trim_ws = TRUE)
View(Ex1_measurements_Toy)
save(Ex1_measurements_Toy, file = "Ex1_measurements_Toy.RData")
library(readr)
Ex1_network_Toy <- read_delim("~/Documents/GitHub/CARNIVAL-Bioconductor-Dev/inst/Ex1_network_Toy.sif",
"\t", escape_double = FALSE, trim_ws = TRUE)
View(Ex1_network_Toy)
save(Ex1_network_Toy, file = "Ex1_network_Toy.RData")
library(readr)
Ex2_measurements_SBV_EGF <- read_delim("~/Documents/GitHub/CARNIVAL-Bioconductor-Dev/inst/Ex2_measurements_SBV_EGF.txt",
"\t", escape_double = FALSE, trim_ws = TRUE)
View(Ex2_measurements_SBV_EGF)
save(Ex2_measurements_SBV_EGF, file = "Ex2_measurements_SBV_EGF.RData")
library(readr)
Ex2_measurements_SBV_EGF <- read_delim("~/Documents/GitHub/CARNIVAL-Bioconductor-Dev/inst/Ex2_measurements_SBV_EGF.txt",
"\t", escape_double = FALSE, trim_ws = TRUE)
View(Ex2_measurements_SBV_EGF)
library(readr)
Ex2_network_SBV_Omnipath <- read_delim("~/Documents/GitHub/CARNIVAL-Bioconductor-Dev/inst/Ex2_network_SBV_Omnipath.sif",
"\t", escape_double = FALSE, trim_ws = TRUE)
View(Ex2_network_SBV_Omnipath)
save(Ex2_network_SBV_Omnipath, file = "Ex2_network_SBV_Omnipath.RData")
library(readr)
Ex2_inputs_SBV_EGF <- read_delim("~/Documents/GitHub/CARNIVAL-Bioconductor-Dev/inst/Ex2_inputs_SBV_EGF.txt",
"\t", escape_double = FALSE, trim_ws = TRUE)
View(Ex2_inputs_SBV_EGF)
save(Ex2_inputs_SBV_EGF, file = "Ex2_inputs_SBV_EGF.RData")
library(readr)
Ex2_weights_SBV_EGF <- read_delim("~/Documents/GitHub/CARNIVAL-Bioconductor-Dev/inst/Ex2_weights_SBV_EGF.txt",
"\t", escape_double = FALSE, trim_ws = TRUE)
View(Ex2_weights_SBV_EGF)
save(Ex2_weights_SBV_EGF, file = "Ex2_weights_SBV_EGF.RData")
library(readr)
Ex3_measurement_APAP_TGG_24hrHighDose <- read_delim("~/Documents/GitHub/CARNIVAL-Bioconductor-Dev/inst/Ex3_measurement_APAP_TGG_24hrHighDose.txt",
"\t", escape_double = FALSE, trim_ws = TRUE)
View(Ex3_measurement_APAP_TGG_24hrHighDose)
save(Ex3_measurement_APAP_TGG_24hrHighDose, file = "Ex3_measurement_APAP_TGG_24hrHighDose.RData")
library(readr)
Ex3_network_APAP_TGG_Omnipath <- read_delim("~/Documents/GitHub/CARNIVAL-Bioconductor-Dev/inst/Ex3_network_APAP_TGG_Omnipath.sif",
"\t", escape_double = FALSE, trim_ws = TRUE)
View(Ex3_network_APAP_TGG_Omnipath)
save(Ex3_network_APAP_TGG_Omnipath, file = "Ex3_network_APAP_TGG_Omnipath.RData")
library(readr)
Ex3_weights_APAP_TGG_24hrHighDose <- read_delim("~/Documents/GitHub/CARNIVAL-Bioconductor-Dev/inst/Ex3_weights_APAP_TGG_24hrHighDose.txt",
"\t", escape_double = FALSE, trim_ws = TRUE)
View(Ex3_weights_APAP_TGG_24hrHighDose)
save(Ex3_weights_APAP_TGG_24hrHighDose, file = "Ex3_weights_APAP_TGG_24hrHighDose.RData")
library(readr)
model_NatComm_14_human <- read_csv("~/Documents/GitHub/CARNIVAL-Bioconductor-Dev/inst/model_NatComm+14_human.csv")
View(model_NatComm_14_human)
save(model_NatComm_14_human, file = "model_NatComm_14_human.RData")
library(readr)
dorothea_TF_mapping <- read_csv("~/Documents/GitHub/CARNIVAL-Bioconductor-Dev/inst/dorothea_TF_mapping.csv")
View(dorothea_TF_mapping)
save(dorothea_TF_mapping, file = "dorothea_TF_mapping.RData")
library(readr)
nodes_PKN_uniprot_genesymbol <- read_delim("~/Documents/GitHub/CARNIVAL-Bioconductor-Dev/inst/nodes_PKN_uniprot_genesymbol.tsv",
"\t", escape_double = FALSE, trim_ws = TRUE)
View(nodes_PKN_uniprot_genesymbol)
save(nodes_PKN_uniprot_genesymbol, file = "nodes_PKN_uniprot_genesymbol.RData")
library(readr)
SBV_EGF_tvalues <- read_delim("~/Documents/GitHub/CARNIVAL-Bioconductor-Dev/inst/SBV_EGF_tvalues.csv",
";", escape_double = FALSE, trim_ws = TRUE)
View(SBV_EGF_tvalues)
save(SBV_EGF_tvalues, file = "SBV_EGF_tvalues.RData")
library(readr)
meas_EGF_50 <- read_delim("~/Documents/GitHub/CARNIVAL-Bioconductor-Dev/inst/measurements/meas_EGF_50.txt",
"\t", escape_double = FALSE, trim_ws = TRUE)
View(meas_EGF_50)
getwd()
save(meas_EGF_50, file = "meas_EGF_50.RData")
library(readr)
scores_EGF <- read_delim("~/Documents/GitHub/CARNIVAL-Bioconductor-Dev/inst/measurements/scores_EGF.txt",
"\t", escape_double = FALSE, trim_ws = TRUE)
View(scores_EGF)
save(scores_EGF, file = "scores_EGF.RData")
load("~/Documents/GitHub/CARNIVAL-Bioconductor-Dev/inst/c2.cp.biocarta.v6.2.symbols.gmt")
rm(list = ls())
